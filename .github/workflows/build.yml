name: Build and Release

on:
  push:
    branches: [ master ]

permissions:
  contents: write

jobs:
  build:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Debug PATH
      run: echo $env:PATH
      shell: powershell

    - name: Install dependencies
      shell: powershell
      run: |
        & "${{ env.pythonLocation }}\python.exe" -m pip install --upgrade pip
        & "${{ env.pythonLocation }}\python.exe" -m pip install -r requirements.txt
        & "${{ env.pythonLocation }}\python.exe" -m pip install pyinstaller

    - name: List files in the repository
      run: ls -R
      shell: powershell

    - name: Build with PyInstaller
      shell: powershell
      run: pyinstaller SOCDunk.spec

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/SOCDunk.exe
        asset_name: SOCDunk.exe
        asset_content_type: application/vnd.microsoft.portable-executable

  deploy-pages:
    runs-on: self-hosted
    needs: build
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v3
      with:
        ref: gh-pages

    - name: Install Scoop
      run: |
        Set-ExecutionPolicy RemoteSigned -scope CurrentUser
        irm get.scoop.sh | iex
        Add-Content -Path $env:GITHUB_PATH -Value "$HOME\scoop\shims"
      shell: powershell

    - name: Install gh-cli
      run: scoop install gh
      shell: powershell

    - name: Update and commit index.html
      shell: powershell
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $releaseTag = "${{ github.run_number }}"
        $repoName = "${{ github.event.repository.name }}"
        $ownerName = "${{ github.repository_owner }}"
        $downloadLink = "https://github.com/$ownerName/$repoName/releases/download/$releaseTag/SOCDunk.exe"

        $releases = gh release list --repo $ownerName/$repoName --json tagName --limit 10
        $releasesJson = $releases | ConvertTo-Json -Compress

        $content = Get-Content index.html -Raw
        $content = $content -replace '{{ LATEST_RELEASE_TAG }}', $releaseTag
        $content = $content -replace '{{ RELEASES_JSON }}', $releasesJson
        $content = $content -replace 'href="#"', "href=`"$downloadLink`""
        $content = $content -replace 'Version: <span id="appVersion">Loading...</span>', "Version: <span id=`"appVersion`">$releaseTag</span>"
        $content = $content -replace 'Last Updated: <span id="lastUpdated">Loading...</span>', "Last Updated: <span id=`"lastUpdated`">$(Get-Date -Format `"yyyy-MM-dd`")</span>"
        $content | Set-Content index.html

        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add index.html
        if (git diff --staged --quiet) {
            echo "No changes to commit"
        } else {
            git commit -m "Update index.html to release $releaseTag"
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages
        }
